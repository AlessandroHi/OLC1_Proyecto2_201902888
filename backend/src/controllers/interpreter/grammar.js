/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,23],$V2=[1,17],$V3=[1,15],$V4=[1,18],$V5=[1,21],$V6=[1,22],$V7=[1,19],$V8=[1,20],$V9=[1,24],$Va=[1,25],$Vb=[1,26],$Vc=[1,27],$Vd=[1,28],$Ve=[2,5,18,19,23,29,30,31,33,36,38,83,84,85,86,87],$Vf=[1,44],$Vg=[1,67],$Vh=[1,70],$Vi=[1,71],$Vj=[1,72],$Vk=[1,73],$Vl=[1,74],$Vm=[1,75],$Vn=[1,76],$Vo=[1,68],$Vp=[1,69],$Vq=[1,61],$Vr=[1,62],$Vs=[1,63],$Vt=[1,64],$Vu=[1,65],$Vv=[1,66],$Vw=[2,18],$Vx=[1,77],$Vy=[1,93],$Vz=[1,94],$VA=[1,95],$VB=[1,96],$VC=[1,97],$VD=[1,98],$VE=[1,99],$VF=[1,100],$VG=[1,101],$VH=[1,102],$VI=[1,103],$VJ=[1,104],$VK=[1,105],$VL=[1,106],$VM=[9,21,34,62,63,64,65,66,67,68,69,70,71,72,73,74,75],$VN=[1,107],$VO=[1,108],$VP=[1,124],$VQ=[21,34],$VR=[9,21,34,62,63,68,69,70,71,72,73,74,75],$VS=[9,21,34,74,75],$VT=[1,159],$VU=[9,21,34,62,63,64,65,67,68,69,70,71,72,73,74,75],$VV=[9,21,34,68,69,70,71,72,73,74,75];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DEFPRINT":7,"DECLARAR":8,"PTCOMA":9,"INCREDECRE":10,"GUARDARFUNCION":11,"LLAMADAFUNCION":12,"FOR":13,"CONTROLIF":14,"DOWHILE":15,"WHILE":16,"MAIN":17,"RMAIN":18,"ID":19,"PARIZQ":20,"PARDER":21,"ARGUMENTOS":22,"RPRIN":23,"EXPRESION":24,"TIPO":25,"IGUAL":26,"STATEMENT":27,"PARAMETROS":28,"RVOID":29,"RDO":30,"RWHILE":31,"LLAVEIZQ":32,"LLAVEDER":33,"COMA":34,"PARAMETRO":35,"RFOR":36,"OPERACIONESUNARIOS":37,"RIF":38,"CONTROLELSE":39,"RELSE":40,"INCRE":41,"DECRE":42,"PRIMITIVO":43,"ACCEDERVAR":44,"ARITMETICA":45,"RELACIONALES":46,"LOGICOS":47,"TOLOWER":48,"TOUPPER":49,"LENGTH":50,"TRUNCATE":51,"ROUND":52,"TYPEOF":53,"TOSTRING":54,"RTOLOWER":55,"RTOUPPER":56,"RLENGTH":57,"RTRUNCATE":58,"RROUND":59,"RTYPEOF":60,"RTOSTRING":61,"MAS":62,"MENOS":63,"POR":64,"DIVISION":65,"POTENCIA":66,"MODULO":67,"IGUALQ":68,"MENORQUE":69,"MAYORQUE":70,"DIFERENTEQ":71,"MAYORIGUALQUE":72,"MENORIGUALQUE":73,"OR":74,"AND":75,"NOT":76,"ENTERO":77,"DECIMAL":78,"CADENA":79,"CARACTER":80,"TRUE":81,"FALSE":82,"RENTERO":83,"RDOUBLE":84,"RSTRING":85,"RCHAR":86,"RBOOLEAN":87,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"PTCOMA",18:"RMAIN",19:"ID",20:"PARIZQ",21:"PARDER",23:"RPRIN",26:"IGUAL",29:"RVOID",30:"RDO",31:"RWHILE",32:"LLAVEIZQ",33:"LLAVEDER",34:"COMA",36:"RFOR",38:"RIF",40:"RELSE",41:"INCRE",42:"DECRE",55:"RTOLOWER",56:"RTOUPPER",57:"RLENGTH",58:"RTRUNCATE",59:"RROUND",60:"RTYPEOF",61:"RTOSTRING",62:"MAS",63:"MENOS",64:"POR",65:"DIVISION",66:"POTENCIA",67:"MODULO",68:"IGUALQ",69:"MENORQUE",70:"MAYORQUE",71:"DIFERENTEQ",72:"MAYORIGUALQUE",73:"MENORIGUALQUE",74:"OR",75:"AND",76:"NOT",77:"ENTERO",78:"DECIMAL",79:"CADENA",80:"CARACTER",81:"TRUE",82:"FALSE",83:"RENTERO",84:"RDOUBLE",85:"RSTRING",86:"RCHAR",87:"RBOOLEAN"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[17,4],[17,5],[7,5],[8,2],[8,4],[11,5],[11,6],[11,5],[11,6],[15,7],[16,5],[27,3],[28,3],[28,1],[35,2],[13,9],[14,6],[39,2],[39,2],[39,0],[10,3],[10,3],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[12,3],[12,4],[22,3],[22,1],[48,4],[49,4],[50,4],[51,4],[52,4],[53,4],[54,4],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,2],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[47,3],[47,3],[47,2],[37,2],[37,2],[44,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[25,1],[25,1],[25,1],[25,1],[25,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 28:
 this.$ = [$$[$0]]; 
break;
case 4: case 6: case 7: case 9: case 10: case 11: case 12: case 32: case 33: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49:
 this.$ = $$[$0]; 
break;
case 5: case 8: case 13:
 this.$ = $$[$0-1]; 
break;
case 14:
  console.error("En la linea "+ this._$.first_column)
    Sintactico = new Error("Sintactico","No se esperaba el caracter ", this._$.first_line,+ this._$.first_column); ListaErrores.push(Sintactico);
break;
case 15:
 this.$ = new Main($$[$0-2],[],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 16:
 this.$ = new Main($$[$0-3],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 17:
 this.$ = new Print(_$[$0-4].first_line, _$[$0-4].first_column,$$[$0-2]); 
break;
case 18:
 this.$ = new Declarar($$[$0],$$[$0-1],null,_$[$0-1].first_line, _$[$0-1].first_column ); 
break;
case 19:
 this.$ = new Declarar($$[$0-2],$$[$0-3],$$[$0],_$[$0-3].first_line, _$[$0-3].first_column ); 
break;
case 20:
 this.$ = new Funcion($$[$0-4],$$[$0-3],[],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column ); 
break;
case 21:
 this.$ = new Funcion($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column ); 
break;
case 22:
 this.$ = new Funcion(null,$$[$0-3],[],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column ); 
break;
case 23:
 this.$ = new Funcion(null,$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column ); 
break;
case 24:
  this.$ = new DoWhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);    
break;
case 25:
 this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);    
break;
case 26:
 this.$ = new Statement($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 27:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 29:
this.$ = new Parametros($$[$0-1],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 30:
 this.$ = new For($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 31:
 this.$ = new If($$[$0-3],$$[$0-1],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 34:
 this.$ = null; 
break;
case 35:
 this.$= new Incre($$[$0-2],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 36:
 this.$= new Decre($$[$0-2],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 50:
 this.$ = new LlamadaFuncion($$[$0-2],[],_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 51:
 this.$ = new LlamadaFuncion($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 52:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 53:
 this.$ = [$$[$0]];
break;
case 54:
this.$ = new ToLower($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 55:
this.$ = new ToUpper($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 56:
this.$ = new Length($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 57:
this.$ = new Truncate($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 58:
this.$ = new Round($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 59:
this.$ = new Typeof($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 60:
this.$ = new ToString($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 61:
 this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.SUMA,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 62:
 this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.RESTA,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 63:
 this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MULTIPLICACION,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 64:
 this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.DIVISION,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 65:
 this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.POTENCIA,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 66:
 this.$ = new Aritmetica($$[$0-2],$$[$0],TipoAritmetica.MODULO,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 67:
 this.$ = new Aritmetica($$[$0],$$[$0],TipoAritmetica.UMENOS,_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 68:
 this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.IGUALQ,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 69:
 this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MENORQUE,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 70:
 this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYORQUE,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 71:
 this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.DIFERENTEQ,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 72:
 this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MAYORIGUALQUE,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 73:
 this.$ = new Relacional($$[$0-2],$$[$0],TipoRelacional.MENORIGUALQUE,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 74:
 this.$ = new Logica($$[$0-2],$$[$0],TipoLogica.OR,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 75:
 this.$ = new Logica($$[$0-2],$$[$0],TipoLogica.AND,_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 76:
 this.$ = new Logica($$[$0],null,TipoLogica.NOT,_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 77:
 this.$ = new OperacionesUnarios($$[$0-1],TipoAritmetica.INCREMENTO,_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 78:
 this.$ = new OperacionesUnarios($$[$0-1],TipoAritmetica.DECREMENTO,_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 79:
 this.$ = new Acceso($$[$0],_$[$0].first_line, _$[$0].first_column); 
break;
case 80:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column,$$[$0],Type.INT); 
break;
case 81:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column,$$[$0],Type.DOUBLE); 
break;
case 82:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column,$$[$0],Type.STRING);
break;
case 83:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column,$$[$0],Type.CHAR); 
break;
case 84: case 85:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column,$$[$0],Type.BOOLEAN); 
break;
case 86:
 this.$ = Type.INT; 
break;
case 87:
 this.$ = Type.DOUBLE; 
break;
case 88:
 this.$ = Type.STRING; 
break;
case 89:
 this.$ = Type.CHAR; 
break;
case 90:
 this.$ = Type.BOOLEAN; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,23:$V3,25:16,29:$V4,30:$V5,31:$V6,36:$V7,38:$V8,83:$V9,84:$Va,85:$Vb,86:$Vc,87:$Vd},{1:[3]},{2:$V0,5:[1,29],6:30,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,23:$V3,25:16,29:$V4,30:$V5,31:$V6,36:$V7,38:$V8,83:$V9,84:$Va,85:$Vb,86:$Vc,87:$Vd},o($Ve,[2,3]),o($Ve,[2,4]),{9:[1,31]},o($Ve,[2,6]),o($Ve,[2,7]),{9:[1,32]},o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),o($Ve,[2,12]),{9:[1,33]},{9:[1,34]},{20:[1,35]},{19:[1,36]},{20:[1,39],41:[1,37],42:[1,38]},{19:[1,40]},{20:[1,41]},{20:[1,42]},{27:43,32:$Vf},{20:[1,45]},{19:[1,46]},{19:[2,86]},{19:[2,87]},{19:[2,88]},{19:[2,89]},{19:[2,90]},{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,5]),o($Ve,[2,8]),o($Ve,[2,13]),o($Ve,[2,14]),{19:$Vg,24:47,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{9:$Vw,20:[1,78],26:$Vx},{9:[1,79]},{9:[1,80]},{19:$Vg,21:[1,81],22:82,24:83,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{20:[1,84]},{8:85,25:86,83:$V9,84:$Va,85:$Vb,86:$Vc,87:$Vd},{19:$Vg,24:87,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{31:[1,88]},{2:$V0,4:89,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,23:$V3,25:16,29:$V4,30:$V5,31:$V6,36:$V7,38:$V8,83:$V9,84:$Va,85:$Vb,86:$Vc,87:$Vd},{19:$Vg,24:90,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{20:[1,91]},{21:[1,92],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL},o($VM,[2,37]),o($VM,[2,38]),o($VM,[2,39]),o($VM,[2,40]),o($VM,[2,41]),o($VM,[2,42]),o($VM,[2,43]),o($VM,[2,44]),o($VM,[2,45]),o($VM,[2,46]),o($VM,[2,47]),o($VM,[2,48]),o($VM,[2,49]),o($VM,[2,80]),o($VM,[2,81]),o($VM,[2,82]),o($VM,[2,83]),o($VM,[2,84]),o($VM,[2,85]),o($VM,[2,79],{41:$VN,42:$VO}),{19:$Vg,24:109,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{19:$Vg,24:110,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{20:[1,111]},{20:[1,112]},{20:[1,113]},{20:[1,114]},{20:[1,115]},{20:[1,116]},{20:[1,117]},{19:$Vg,24:118,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{21:[1,119],25:122,28:120,35:121,83:$V9,84:$Va,85:$Vb,86:$Vc,87:$Vd},o($Ve,[2,35]),o($Ve,[2,36]),{9:[2,50]},{21:[1,123],34:$VP},o($VQ,[2,53],{62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL}),{21:[1,125],25:122,28:126,35:121,83:$V9,84:$Va,85:$Vb,86:$Vc,87:$Vd},{9:[1,127]},{19:[1,128]},{21:[1,129],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL},{20:[1,130]},{2:$V0,6:30,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,23:$V3,25:16,29:$V4,30:$V5,31:$V6,33:[1,131],36:$V7,38:$V8,83:$V9,84:$Va,85:$Vb,86:$Vc,87:$Vd},{21:[1,132],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL},{19:$Vg,21:[1,133],22:134,24:83,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{9:[1,135]},{19:$Vg,24:136,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{19:$Vg,24:137,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{19:$Vg,24:138,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{19:$Vg,24:139,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{19:$Vg,24:140,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{19:$Vg,24:141,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{19:$Vg,24:142,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{19:$Vg,24:143,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{19:$Vg,24:144,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{19:$Vg,24:145,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{19:$Vg,24:146,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{19:$Vg,24:147,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{19:$Vg,24:148,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{19:$Vg,24:149,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},o($VM,[2,77]),o($VM,[2,78]),o($VR,[2,67],{64:$VA,65:$VB,66:$VC,67:$VD}),o($VS,[2,76],{62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ}),{19:$Vg,24:150,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{19:$Vg,24:151,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{19:$Vg,24:152,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{19:$Vg,24:153,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{19:$Vg,24:154,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{19:$Vg,24:155,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{19:$Vg,24:156,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{9:[2,19],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL},{27:157,32:$Vf},{21:[1,158],34:$VT},o($VQ,[2,28]),{19:[1,160]},{9:[2,51]},{19:$Vg,24:161,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{27:162,32:$Vf},{21:[1,163],34:$VT},{19:$Vg,24:164,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},{9:$Vw,26:$Vx},{27:165,32:$Vf},{19:$Vg,24:166,37:53,43:48,44:49,45:50,46:51,47:52,48:54,49:55,50:56,51:57,52:58,53:59,54:60,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,61:$Vn,63:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv},o([2,5,18,19,23,29,30,31,33,36,38,40,83,84,85,86,87],[2,26]),{27:167,32:$Vf},{9:[2,15]},{21:[1,168],34:$VP},o($Ve,[2,17]),o($VR,[2,61],{64:$VA,65:$VB,66:$VC,67:$VD}),o($VR,[2,62],{64:$VA,65:$VB,66:$VC,67:$VD}),o($VU,[2,63],{66:$VC}),o($VU,[2,64],{66:$VC}),o($VU,[2,65]),o($VU,[2,66],{66:$VC}),o($VV,[2,68],{62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD}),o($VV,[2,69],{62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD}),o($VV,[2,70],{62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD}),o($VV,[2,71],{62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD}),o($VV,[2,72],{62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD}),o($VV,[2,73],{62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD}),o([9,21,34,74],[2,74],{62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,75:$VL}),o($VS,[2,75],{62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ}),{21:[1,169],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL},{21:[1,170],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL},{21:[1,171],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL},{21:[1,172],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL},{21:[1,173],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL},{21:[1,174],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL},{21:[1,175],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL},o($Ve,[2,20]),{27:176,32:$Vf},{25:122,35:177,83:$V9,84:$Va,85:$Vb,86:$Vc,87:$Vd},o($VQ,[2,29]),o($VQ,[2,52],{62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL}),o($Ve,[2,22]),{27:178,32:$Vf},{9:[1,179],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL},o($Ve,[2,34],{39:180,40:[1,181]}),{21:[1,182],62:$Vy,63:$Vz,64:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL},o($Ve,[2,25]),{9:[2,16]},o($VM,[2,54]),o($VM,[2,55]),o($VM,[2,56]),o($VM,[2,57]),o($VM,[2,58]),o($VM,[2,59]),o($VM,[2,60]),o($Ve,[2,21]),o($VQ,[2,27]),o($Ve,[2,23]),{19:[1,184],37:183},o($Ve,[2,31]),{14:186,27:185,32:$Vf,38:$V8},{9:[1,187]},{21:[1,188]},{41:$VN,42:$VO},o($Ve,[2,32]),o($Ve,[2,33]),o($Ve,[2,24]),{27:189,32:$Vf},o($Ve,[2,30])],
defaultActions: {24:[2,86],25:[2,87],26:[2,88],27:[2,89],28:[2,90],29:[2,1],81:[2,50],123:[2,51],133:[2,15],168:[2,16]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


  //import list errores
  const { ListaErrores} = require ("./Reports/Error.ts");
  const { Error} = require ("./Reports/Error.ts");

  // importar tipos
  const {Type} = require('./abstract/Return');
  const {TipoAritmetica} = require('./utils/TipoAritmetica');
  const {TipoRelacional} = require('./utils/TipoRelacional');
  const {TipoLogica} = require('./utils/TipoLogica')
  const {Primitivo} = require('./expression/Primitivo');
  

  //importar instrucciones y funciones
  const {Main} = require('./expression/main/Main')
  const {Print} = require('./instruction/Print');
  const {ToLower} = require('./expression/funciones nativas/ToLower')
  const {ToUpper} = require('./expression/funciones nativas/ToUpper')
  const {Length} = require('./expression/funciones nativas/Length')
  const {Truncate} = require('./expression/funciones nativas/Truncate')
  const {Typeof} = require('./expression/funciones nativas/Typeof')
  const {Round} = require('./expression/funciones nativas/Round')
  const {ToString} = require('./expression/funciones nativas/ToString')
  const {Declarar} = require('./instruction/Declarar');
  const {Acceso} = require('./expression/Acceso');
  const {Aritmetica} = require('./expression/Aritmetica');
  const {Statement} = require('./instruction/Statement');
  const {Funcion} = require('./instruction/Funcion');
  const {Parametros} = require('./expression/Parametros');
  const {LlamadaFuncion} = require('./expression/LlamadaFuncion');
  const {Relacional} = require('./expression/Relacional');
  const {Logica} = require('./expression/Logica');
  const {OperacionesUnarios} = require('./expression/OperacionesUnarios');
  const {Incre} = require('./instruction/Incre')
  const {Decre} = require('./instruction/Decre.ts')
  const {For} = require('./instruction/ciclos/For');
  const {DoWhile} = require('./instruction/ciclos/DoWhile')
  const {While} = require('./instruction/ciclos/While');
  const {If} = require('./instruction/control/If');
  
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignoro los comentarios simples */
break;
case 1:/*Ignorar comentarios con multiples lneas*/
break;
case 2:return 9;
break;
case 3:return 20;
break;
case 4:return 21;
break;
case 5:return 'PUNTO';
break;
case 6:return 'DOSPUNTOS';
break;
case 7:return 34;
break;
case 8:return 'CORIZR';
break;
case 9:return 'CORDER';
break;
case 10:return 32;
break;
case 11:return "LLAVEDER";
break;
case 12:return 23;   // funcion de imprimir
break;
case 13:return 81;
break;
case 14:return 82;
break;
case 15:return 36;
break;
case 16:return 38;
break;
case 17:return 40;
break;
case 18:return 'RSWITCH'
break;
case 19:return 'RCASE'
break;
case 20:return 'RDEFAULT'
break;
case 21:return 'RBREAK'
break;
case 22:return 30;
break;
case 23:return 31;
break;
case 24:return 29;
break;
case 25:return 55;
break;
case 26:return 56;
break;
case 27:return 57;
break;
case 28:return 58;
break;
case 29:return 59;
break;
case 30:return 60;
break;
case 31:return 61;
break;
case 32:return 18;
break;
case 33:return 68;
break;
case 34:return 71;
break;
case 35:return 73;
break;
case 36:return 72;
break;
case 37:return 69;
break;
case 38:return 70;
break;
case 39:return 74;
break;
case 40:return 75;
break;
case 41:return 76;
break;
case 42:return 'TERNARIO';
break;
case 43:return 26;
break;
case 44:return 41;
break;
case 45:return 42;
break;
case 46:return 62;
break;
case 47:return 63;
break;
case 48:return 64;
break;
case 49:return 65;
break;
case 50:return 66;
break;
case 51:return 67;
break;
case 52:return 83;
break;
case 53:return 85;
break;
case 54:return 86;
break;
case 55:return 87;
break;
case 56:return 84;
break;
case 57:
break;
case 58:
break;
case 59:return 19;
break;
case 60:return 78;
break;
case 61:return 77;
break;
case 62: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 80; 
break;
case 63:cadena="";this.begin("string");
break;
case 64:cadena+=yy_.yytext;
break;
case 65:cadena+="\"";
break;
case 66:cadena+="\n";
break;
case 67:cadena+="\t";
break;
case 68:cadena+="\\";
break;
case 69:cadena+="\'";
break;
case 70:yy_.yytext=cadena; this.popState(); return 79;
break;
case 71:return 5;
break;
case 72:  Lexico = new Error("Lexico","No se reconocio el caracter: "+yy_.yytext, yy_.yylloc.first_line,yy_.yylloc.first_column+1); ListaErrores.push(Lexico);
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*((\*+[^/*])|([^*]))*\**\*\/)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?::)/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:for\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:do\b)/i,/^(?:while\b)/i,/^(?:void\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:main\b)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\?)/i,/^(?:=)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:'((\\')|[^\n\'])*')/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[64,65,66,67,68,69,70],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}